// Code generated by protoc-gen-go.
// source: servicepb/feedback.proto
// DO NOT EDIT!

package servicepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobRef struct {
	JobId  uint64 `protobuf:"varint,1,opt,name=job_id" json:"job_id,omitempty"`
	NodeId uint64 `protobuf:"varint,2,opt,name=node_id" json:"node_id,omitempty"`
}

func (m *JobRef) Reset()         { *m = JobRef{} }
func (m *JobRef) String() string { return proto.CompactTextString(m) }
func (*JobRef) ProtoMessage()    {}

type JobProgressStep struct {
	Job    *JobRef                 `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Output *JobProgressStep_Output `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *JobProgressStep) Reset()         { *m = JobProgressStep{} }
func (m *JobProgressStep) String() string { return proto.CompactTextString(m) }
func (*JobProgressStep) ProtoMessage()    {}

func (m *JobProgressStep) GetJob() *JobRef {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobProgressStep) GetOutput() *JobProgressStep_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type JobProgressStep_Output struct {
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr []byte `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *JobProgressStep_Output) Reset()         { *m = JobProgressStep_Output{} }
func (m *JobProgressStep_Output) String() string { return proto.CompactTextString(m) }
func (*JobProgressStep_Output) ProtoMessage()    {}

type JobProgressResponse struct {
}

func (m *JobProgressResponse) Reset()         { *m = JobProgressResponse{} }
func (m *JobProgressResponse) String() string { return proto.CompactTextString(m) }
func (*JobProgressResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for FeedbackService service

type FeedbackServiceClient interface {
	JobProgress(ctx context.Context, opts ...grpc.CallOption) (FeedbackService_JobProgressClient, error)
}

type feedbackServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeedbackServiceClient(cc *grpc.ClientConn) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) JobProgress(ctx context.Context, opts ...grpc.CallOption) (FeedbackService_JobProgressClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FeedbackService_serviceDesc.Streams[0], c.cc, "/servicepb.FeedbackService/JobProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedbackServiceJobProgressClient{stream}
	return x, nil
}

type FeedbackService_JobProgressClient interface {
	Send(*JobProgressStep) error
	CloseAndRecv() (*JobProgressResponse, error)
	grpc.ClientStream
}

type feedbackServiceJobProgressClient struct {
	grpc.ClientStream
}

func (x *feedbackServiceJobProgressClient) Send(m *JobProgressStep) error {
	return x.ClientStream.SendMsg(m)
}

func (x *feedbackServiceJobProgressClient) CloseAndRecv() (*JobProgressResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(JobProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FeedbackService service

type FeedbackServiceServer interface {
	JobProgress(FeedbackService_JobProgressServer) error
}

func RegisterFeedbackServiceServer(s *grpc.Server, srv FeedbackServiceServer) {
	s.RegisterService(&_FeedbackService_serviceDesc, srv)
}

func _FeedbackService_JobProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FeedbackServiceServer).JobProgress(&feedbackServiceJobProgressServer{stream})
}

type FeedbackService_JobProgressServer interface {
	SendAndClose(*JobProgressResponse) error
	Recv() (*JobProgressStep, error)
	grpc.ServerStream
}

type feedbackServiceJobProgressServer struct {
	grpc.ServerStream
}

func (x *feedbackServiceJobProgressServer) SendAndClose(m *JobProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *feedbackServiceJobProgressServer) Recv() (*JobProgressStep, error) {
	m := new(JobProgressStep)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FeedbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicepb.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobProgress",
			Handler:       _FeedbackService_JobProgress_Handler,
			ClientStreams: true,
		},
	},
}
